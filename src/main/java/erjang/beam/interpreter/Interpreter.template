/** -*- mode:java; tab-width: 4 -*-
 * This file is part of Erjang - A JVM-based Erlang VM
 *
 * Copyright (c) 2010 by Trifork
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

package erjang.beam.interpreter;

import java.util.List;

import erjang.EModule;
import erjang.EModuleManager;
import erjang.EFun;
import erjang.EFunHandler;
import erjang.FunID;

import erjang.ERT;
import erjang.EProc;

import erjang.EObject;
import erjang.EAtom;
import erjang.ENumber;
import erjang.EInteger;
import erjang.ESmall;
import erjang.EDouble;
import erjang.ESeq;
import erjang.ECons;
import erjang.ETuple;
import erjang.EBinary;
import erjang.EBitString;
import erjang.EString;

import erjang.EBinMatchState;
import erjang.ErlangException;
import erjang.EBitStringBuilder;
import erjang.m.erlang.ErlBif;

import erjang.beam.BeamFileData;
import erjang.beam.FunctionVisitor;
import erjang.beam.BlockVisitor;
import erjang.beam.BIFUtil;
import erjang.beam.BuiltInFunction;

import erjang.beam.repr.Insn;
import erjang.beam.repr.Operands;
import erjang.beam.repr.ExtFun;

import kilim.Pausable;

import java.util.logging.Level;
import java.util.logging.Logger;

public class Interpreter extends AbstractInterpreter {
#ENUM#
	public static final short ENSURE_REG_CAPACITY = MAX_OPCODE + 1;

	public static EModule beamFileToEModule(BeamFileData bfd) {
		Encoder encoder = new Encoder();
		bfd.accept(encoder);
		return encoder.toEModule();
	}

	public static class Encoder extends AbstractInterpreter.Encoder {

		protected EModule makeModule(String name,
									 char[] code, EObject[] consts,
									 ValueJumpTable[] value_jump_tables,
									 ArityJumpTable[] arity_jump_tables,
									 List<FunIDWithEntry> exports, List<FunIDWithGuardedness> imports)
		{
			return new Module(name, code, consts,
							  value_jump_tables, arity_jump_tables,
							  exports, imports);
		}

		public FunctionVisitor visitFunction(EAtom name, int arity, int startLabel) {
			return new FunctionEncoder(name, arity, startLabel);
		}

		//--------------------------------------------------

		class FunctionEncoder implements FunctionVisitor, BlockVisitor {
			final EAtom name;
			final int arity;
			final int startLabel;
			private int tuple_pos;

			public FunctionEncoder(EAtom name, int arity, int startLabel) {
				this.name = name;
				this.arity = arity;
				this.startLabel = startLabel;
			}

			/** Common for FunctionVisitor and BlockVisitor... */
			public void visitEnd() {}

			public BlockVisitor visitLabeledBlock(int label) {
				registerLabel(label);
				return this;
			}

			public void visitInsn(Insn insn) {
				int opcode_pos = emitPlaceholder();
				insn_start.put(opcode_pos, insn);

				//log.finer("@ "+opcode_pos+": "+insn.toSymbolic());
				switch (insn.opcode()) {
#ENCODE#
				default: throw new Error("Unknown opcode: "+insn);
				} // switch
			}
		}

#ENCODER_HELPERS#
	}

    public static class Module extends AbstractInterpreter.Module {
		final private char[] code;
		final private EObject[] consts;
		final private ValueJumpTable[] value_jump_tables;
		final private ArityJumpTable[] arity_jump_tables;
		final private List<FunIDWithEntry> exports;
		final private List<FunIDWithGuardedness> imports;
		final private EFun[] ext_funs;

		Module(String name,
			   char[] code, EObject[] consts,
			   ValueJumpTable[] value_jump_tables,
			   ArityJumpTable[] arity_jump_tables,
			   List<FunIDWithEntry> exports, List<FunIDWithGuardedness> imports)
		{
			super(name, true);
			this.code = code;
			this.consts = consts;
			this.value_jump_tables = value_jump_tables;
			this.arity_jump_tables = arity_jump_tables;
			this.exports = exports;
			this.imports = imports;
			ext_funs = new EFun[imports.size()];
			log.fine("INT| Constructed module for "+this.name);
			setup();
		}

		/**
		 * This method is used by EModuleManager in function resolution.
		 */
		public void registerImportsAndExports() throws Exception {
			for (int i=0; i<imports.size(); i++) {
				FunIDWithGuardedness imp_wg = imports.get(i);
				FunID imp = imp_wg.fun;
				boolean is_guard = imp_wg.is_guard;
				log.finer("INT| Import #"+i+": "+imp+" / "+is_guard);

				// If this is a BIF, resolve it right away:
				BuiltInFunction bif =
					BIFUtil.getMethod(imp.module.getName(),
									  imp.function.getName(),
									  imp.arity,
									  is_guard, false);

				if (bif != null && java.lang.reflect.Modifier.isStatic(bif.javaMethod.getModifiers())) {
					//TODO: make this work for virtual methods as well
					ext_funs[i] = EFun.make(bif.javaMethod, this.module_name());
				} else {
					EModuleManager.add_import(imp, new VectorFunBinder(ext_funs, imp, i));
				}
			}

			int j=0;
			for (FunIDWithEntry fi : exports) {
				log.finer("INT| Export #"+(j++)+": "+fi);
				EFun fun = EFun.get_fun_with_handler(fi.module.toString(), fi.function.toString(), fi.arity, new Function(fi.start_pc), getModuleClassLoader());
				EModuleManager.add_export(this, fi, fun);
			}

			load_native_bifs();
		}

		class Function implements EFunHandler {
			final int start_pc;

			public Function(int start_pc) {
				this.start_pc = start_pc;
			}

			public EObject invoke(final EProc proc, final EObject[] args) throws Pausable {
				int argCnt = args.length;
				EObject[] reg = getRegs(proc); //??
				for (int i=0; i<argCnt; i++) {reg[i] = args[i];} //??
				if (log.isLoggable(Level.FINER)) {
					for (int i=0; i<argCnt; i++) log.finer("INT| arg#"+i+"="+args[i]);
				}
				return interpret(proc, start_pc, reg);
			}

			public EObject invoke(final EProc proc, final EObject[] args, int off, int len) throws Pausable {
				EObject[] reg = getRegs(proc); //??
				if (reg == args) {
					return interpret(proc, start_pc, reg);
				} else {
					int argCnt = len;
					for (int i=0; i<argCnt; i++) {reg[i] = args[i];} //??
					if (log.isLoggable(Level.FINER)) {
						for (int i=0; i<argCnt; i++) log.finer("INT| arg#"+i+"="+args[i]);
					}
					return interpret(proc, start_pc, reg);					
				}
			}

			/** Local call - with given PC and register array */
			public EObject invoke_local(final EProc proc, final EObject[] reg, int argCnt, int pc) throws Pausable {
				log.fine("INT| invoking "+name+"@"+pc+"...");
				return interpret(proc, pc, reg);
			}

			public EObject interpret(final EProc proc, int pc, EObject[] reg) throws Pausable {
				final char[] code = Module.this.code;
				EObject stack[] = proc.stack;
				int sp = proc.sp;
				EDouble[] freg = proc.fregs;

				// For exception handling:
				ExceptionHandlerStackElement exh = null;

				// For tuple construction:
				ETuple curtuple = null;

				// For bitstring construction:
				EBitStringBuilder bit_string_builder = null;

				EObject prefetched1 = null, prefetched2 = null;
				int last_pc = pc;

				while (true) try {
						while (true) {
							if (pc >= code.length) {
								throw new Error("Bad jump to: "+module_name()+"@"+pc+"; from_pc="+last_pc+"; op="+((int)code[last_pc]));
							}
							last_pc = pc;
							final int opcode = code[pc++];
							if (log.isLoggable(Level.FINEST)) {
								log.finest("STACK| "); for (int i=0; i<=sp; i++) {log.finest("  "+i+":"+stack[i]);} log.finest("");
							}
							log.finer("INTP|"+proc.self_handle()+" (pc="+(pc-1)+"; sp="+sp+")"+opcode+"   "+reg[0]);
							switch (opcode) {
							case ENSURE_REG_CAPACITY: {
								int max_x = code[pc++];
								log.finer("INTP|"+proc.self_handle()+" Ensure reg capacity: "+max_x);
								reg = ensureCapacity(reg, max_x);
							} break;

#INTERPRET<-STACK_ALLOC(n) {stack = ensureCapacity(stack, sp+n, sp+1); sp += n;}#
#INTERPRET<-STACK_DEALLOC(n) {for (int _i=0; _i<n; _i++) stack[sp--] = null;}#
#INTERPRET<-PRE_CALL()  {proc.stack=stack; proc.sp=sp; stack=null;}#
#INTERPRET<-POST_CALL() {stack=proc.stack; assert(proc.sp==sp);}#
#INTERPRET<-REGS_AS_SEQ(arity) xregsSeq(reg,arity)#
#INTERPRET<-REGS_AS_ARRAY(arity) xregsArray(reg,arity)#
#INTERPRET<-LOCAL_CALL(keep,label) invoke_local(proc, reg, keep,label)#
#INTERPRET<-MAKE_CLOSURE(env,arity,label) (EFun.get_fun_with_handler("erlang", "make_fun2", arity, new Closure(env, label), getModuleClassLoader()))#
#INTERPRET<-MAKE_EXH_LINK(new_exh_pc, is_try) (is_try ? new TryExceptionHandler(new_exh_pc, exh) : new CatchExceptionHandler(new_exh_pc, exh))#
#INTERPRET<-RESTORE_EXH(exh_elm) {exh = (ExceptionHandlerStackElement) exh_elm;}#

#INTERPRET#

							default:
								throw new Error("Unimplemented internal opcode: "+opcode+" at "+module_name()+"@"+(pc-1));
							}
						}
					} catch (ErlangException e) {
						if (stack==null) { // POST_CALL():
							stack=proc.stack; assert(proc.sp==sp);
						}

						if (exh != null) {
							proc.last_exception = e;
							exh.catchAction(e,reg);
							pc = exh.pc;
							continue;
						} else throw(e);
					} catch (RuntimeException e) {
						if (log.isLoggable(Level.WARNING)) {
							log.warning("DB| Error when interpreting "+module_name()+"@"+(pc-1)+"; opcode="+code[last_pc]+"; prefetched1="+prefetched1+"; prefetched2="+prefetched2+" : "+e);
							log.warning("Code:");
							for (int i=Math.max(0,pc-15); i<Math.min(code.length,pc+5); i++) log.warning("  "+i+": "+(int)code[i]);
						}
						throw e;
					}
			}
		} // class Function

		class Closure extends Function {
			final EObject[] env;

			public Closure(EObject[] env, int start_pc) {
				super(start_pc);
				this.env = env;
			}

			public EObject invoke(final EProc proc, final EObject[] args) throws Pausable {
				log.fine("INT| Closure invoked @ "+start_pc);
				int argCnt = args.length;
				int envCnt = env.length;
				EObject[] reg = new EObject[1024]; //??
				for (int i=0; i<argCnt; i++) {reg[i] = args[i];} //??
				for (int i=0; i<envCnt; i++) {reg[argCnt+i] = env[i];}
				if (log.isLoggable(Level.FINER)) {
					for (int i=0; i<argCnt+envCnt; i++) log.finer("INT| reg#"+i+"="+reg[i]);
				}
				return interpret(proc, start_pc, reg);
			}
		}

    } // class Module
} // class Interpreter
